import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from PIL import Image

# ---------------------- Configuraci√≥n de p√°gina ----------------------
st.set_page_config(page_title="Recomendador Caf√© Quite√±ito - Kappa", page_icon="‚òï", layout="wide")
st.title("‚òï Recomendador de Platos - Arquitectura Kappa (Caf√© Quite√±ito)")

# ---------------------- Estilos personalizados ----------------------
with open("style/main.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# ---------------------- Logo y encabezado ----------------------
logo = Image.open("Imagenes/logotecazuay.PNG")
col1, col2 = st.columns([3, 1])
with col1:
    st.title("üìä Caf√© Quite√±ito")
    st.markdown("#### Implementaci√≥n de Arquitectura Kappa por Karina Chisaguano")
with col2:
    st.image(logo, width=250)

# -----------------------------------------------------------
# CAPA √öNICA DE STREAM - Flujo continuo de datos
# -----------------------------------------------------------
st.header("üåê Capa √önica de Procesamiento en Flujo (Stream)")

# Simulaci√≥n de flujo hist√≥rico como evento continuo
platos = ["Capuccino", "Latte", "Mocaccino", "Cheesecake", "Croissant", "Sandwich de Jam√≥n"]
usuarios = [f"Cliente_{i}" for i in range(1, 11)]

# Inicializaci√≥n del flujo en la sesi√≥n
if "flujo_valoraciones" not in st.session_state:
    # Cargamos los datos hist√≥ricos como si fueran los primeros eventos del flujo
    historico = pd.read_csv("historico_cafeteria_2025.csv")
    historico["fecha"] = pd.to_datetime(historico.get("fecha", datetime.now()))
    st.session_state["flujo_valoraciones"] = historico

# Formulario de entrada en tiempo real
st.subheader("üïê Ingreso de nueva valoraci√≥n (flujo en tiempo real)")
nuevo_usuario = st.text_input("üë§ Nombre del cliente", "Cliente_nuevo")
plato_nuevo = st.selectbox("üçΩÔ∏è Selecciona el plato", platos)
valor_nuevo = st.slider("‚≠ê Valoraci√≥n del plato (1-5)", 1, 5, 4)

if st.button("Registrar valoraci√≥n"):
    nuevo_evento = pd.DataFrame({
        "usuario": [nuevo_usuario],
        "plato": [plato_nuevo],
        "valoracion": [valor_nuevo],
        "fecha": [datetime.now()]
    })
    # A√±adir el evento al flujo continuo
    st.session_state["flujo_valoraciones"] = pd.concat(
        [st.session_state["flujo_valoraciones"], nuevo_evento], ignore_index=True
    )
    st.success("‚úÖ Nueva valoraci√≥n a√±adida al flujo Kappa.")

# -----------------------------------------------------------
# PROCESAMIENTO CONTINUO DEL FLUJO
# -----------------------------------------------------------
st.header("‚öôÔ∏è Procesamiento continuo de eventos")

# Simulamos un c√°lculo continuo de promedios en el flujo actual
flujo_actual = st.session_state["flujo_valoraciones"]
flujo_actual["valoracion"] = pd.to_numeric(flujo_actual["valoracion"], errors="coerce")

promedios = flujo_actual.groupby("plato")["valoracion"].mean().reset_index()
promedios = promedios.sort_values(by="valoracion", ascending=False)

# Mostrar resultados actualizados
st.subheader("üç∞ Recomendaciones actualizadas en tiempo real")
st.table(promedios.style.format({"valoracion": "{:.2f}"}))

# Plato m√°s recomendado del flujo actual
top_plato = promedios.iloc[0]["plato"]
st.success(f"ü•á Plato m√°s recomendado en tiempo real: **{top_plato}**")

# Visualizaci√≥n din√°mica
st.subheader("üìä Valoraciones promedio por plato (flujo continuo)")
st.bar_chart(promedios.set_index("plato"))

# -----------------------------------------------------------
# MONITOREO DEL FLUJO
# -----------------------------------------------------------
st.header("üì° Flujo completo de eventos registrados")
st.dataframe(flujo_actual.tail(10), use_container_width=True)
st.info("La arquitectura Kappa procesa tanto los datos hist√≥ricos como los nuevos desde un √∫nico flujo de eventos.")
